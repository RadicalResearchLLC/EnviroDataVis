# Introduction to Spatial Visualization 2 {#sec-maps2}

::: {.callout-note appearance="simple"}
Today we will be focusing on the practice of geospatial data visualization.
:::

Once again, my preferred framework for the workflow of data visualization is shown in @fig-TidyverseFramework

![Tidyverse data visualization framework](https://d33wubrfki0l68.cloudfront.net/795c039ba2520455d833b4034befc8cf360a70ba/558a5/diagrams/data-science-explore.png){#fig-TidyverseFramework}

## Load and Install Packages

Load the `tidyverse` and `sf`. Today we will be making static maps in `ggplot` which is part of the `tidyverse` ecosystem. We need the `sf` package to load, transform, and display geospatial data.

```{r}
#| label: load tidyverse
#| echo: true

library(tidyverse)
library(sf)

```

## Acquire Data

Import the `nc` and `SoCalEJ` datasets again. Refer to @sec-maps1 for details on functions.

```{r}
#| label: NC dataset
#| warning: false
#| echo: true

nc <- st_read(system.file("shape/nc.shp", package="sf")) %>% 
  st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")

tail(nc)

```

```{r}
#| label: California Enviroscreen 4.0 SoCal dataset
#| warning: false
#| echo: true

URL.path <- 'https://raw.githubusercontent.com/RadicalResearchLLC/EDVcourse/main/CalEJ4/CalEJ.geoJSON'
SoCalEJ <- st_read(URL.path) %>% 
  st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")

tail(SoCalEJ)

```

### Create a Locations Table

I want to show the location of this classroom and the neighborhood where I live. Let's add locations again.

```{r}
#| label: A lat-lnng dataset
#| warning: false
#| echo: true

lat <- c(34.1100576, 33.8895145)
lng <- c(-117.710074, -117.319014)

locations <- data.frame(lat, lng) 
locations
```

## Visualize the Data - Geospatial `ggplot` Edition

While the tidyverse doesn't have all the features of leaflet, it can be a quick way to visualize geospatial data for static maps and there are times when adding a static `ggplot` map is sufficient and actually preferred to the more detailed `leaflet` maps.  

Let's do a few example `ggplot` maps.

### Visualization functions

* `ggplot()`
  + `geom_sf()` - display `sf` spatial data 
  + `theme_bw()` - a cleaner background and visualization than default gray background for `ggplot`
  + `theme_minimal()` - minimalist theme
  
### Make a basic visualization

Start with the North Carolina data and make a basic `ggplot` and `geom_sf` map as shown 
in @fig-ggBasic.

```{r}
#| label: fig-ggBasic
#| fig-cap: ggplot map for North Carolina counties
#| echo: true

ggplot(data = nc) + 
  geom_sf()

```

Note that `ggplot` uses `+` rather than the `magrittr %>%` for connecting lines of code.

In contrast to the `leaflet` map, the ggplot defaults to showing the x- and y-axis coordinates (latitude and longitude),
shows guidelines, and only draws the counties in the dataset, rather than defaulting to showing an interactive map.  

@fig-ggSoCal shows the same style of map replacing `nc` with `SoCalEJ`.  

```{r}
#| label: fig-ggSoCal
#| fig-cap: ggplot map for census tracts in Inland SoCal counties
#| echo: true

ggplot() + 
  geom_sf(data = SoCalEJ) 

```

### Improve the Visualization

We have many options to improve a `ggplot` visualization.  Let's start by cleaning up the background using `theme_bw()`. `theme_bw()` changes the background from gray to a cleaner black-white style as shown in @fig-ggTheme.

```{r}
#| label: fig-ggTheme
#| fig-cap: ggplot map for North Carolina counties using theme_bw()
#| echo: true

ggplot() + 
  geom_sf(data = nc) +
  theme_bw()

```

We can apply a minimalist aesthetic by choosing `theme_minimal()` as shown in @fig-ggMinimal

```{r}
#| label: fig-ggMinimal
#| fig-cap: ggplot map for North Carolina counties using theme_bw()
#| echo: true

ggplot() + 
  geom_sf(data = nc) +
  theme_minimal()

```

Let's add colors in a ggplot way.

Use `aes(fill = <VARIABLE NAME>)` to assign a category to color the counties by. 
The color palette to fill with is selected in `scale_fill_<TYPE>` where TYPE can be any of the following categories

* binned
* brewer
* continuous
* date or datetime
* discrete
* fermenter
* viridis

First let's use the default palette for **BIR79** to show the county birthrates in 1979. Adding `fill = BIR79` to the `aes()` defaults to the _Blues_ palette. @fig-countyFill shows the result of adding a fill color scale. 

```{r}
#| label: fig-countyFill
#| fig-cap: ggplot map for North Carolina counties using theme_bw() with fill
#| echo: true

ggplot() + 
  geom_sf(data = nc, aes(fill = BIR79)) +
  theme_bw() 

```
Let's change that to a viridis color scale. The function `scale_fill_viridis_c()` adds a fancier color-blind viridis palette in a continuous scale. @fig-viridis shows this color scale option.

```{r}
#| label: fig-viridis
#| fig-cap: ggplot map for North Carolina counties using theme_bw() with viridis
#| echo: true

ggplot() + 
  geom_sf(data = nc, aes(fill = BIR79)) +
  theme_bw() +
  scale_fill_viridis_c()

```
We can also add other geoms, like points or labels to this map.  Let's try to label the counties.

The `nc` dataset has a variable called _NAME_ for the county names. @fig-wNames shows the figure when we add the
county names using the function `geom_sf_text()`.  


```{r}
#| label: fig-wNames
#| fig-cap: ggplot map for North Carolina counties with names overlaid
#| echo: true

ggplot(data = nc) + 
  geom_sf(aes(fill = BIR79)) +
  geom_sf_text(aes(label = NAME), size = 1.5, color = 'white') +
  theme_bw() +
  scale_fill_viridis_c()

```
There is a lot going on in that function. I made the text white _color = 'white'_, the size of the font 1.5 _size = 1.5_, and added the label aesthetic with _aes(label = NAME)_.  If you remove the size or the color, you can see why those alterations were made.

#### Exercise - Improve the SoCalEJ Visualization

1. Add a different `theme` from one of the [theme options](https://ggplot2-book.org/polishing.html)
2. Show a variable (categorical, continuous, or quantile) using a fill option.
3. Add two or more SoCal locations to the map using `geom_point` and your locations table. If that is easy, try increasing the salience of the points through size, color, or shape modifications to that layer.  

@fig-diesel shows a potential example of what that might look like.

```{r}
#| label: fig-diesel
#| fig-cap: ggplot map for SoCal Diesel PM Percentile
#| echo: false

ggplot() + 
  geom_sf(data = SoCalEJ, aes(fill = DieselPM_P)) +
  geom_point(data = locations,  aes(x = lng, y = lat), color = 'orange') +
  theme_bw() +
  scale_fill_viridis_c(option = 'A', direction = -1)

```

It is really hard to see the details here.  Let's learn one last trick to zoom in on a `ggplot` to adjust the axes.
The `scale_x_continuous()` and `scale_y_continuous()` functions allow us to set different axis limits.
@fig-zoomyDiesel shows the 

```{r}
#| label: fig-zoomyDiesel
#| fig-cap: ggplot map for SoCal Diesel PM Percentile zoomed into Claremont and Ontario.
#| echo: true

ggplot() + 
  geom_sf(data = SoCalEJ, aes(fill = DieselPM_P)) +
  geom_point(data = locations,  aes(x = lng, y = lat), color = 'orange') +
  theme_bw() +
  scale_fill_viridis_c(option = 'A', direction = -1) +
  scale_x_continuous(limits = c(-118, -117)) +
  scale_y_continuous(limits = c(33.7, 34.2))

```

```
