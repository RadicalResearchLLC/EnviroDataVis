# Advanced Spatial Visualization {#sec-maps4}

::: {.callout-note appearance="simple"}
Today we will be focusing on the theory and practice of fancy geospatial data visualization.
:::

## Visual Categories and Encodings

Let's go back to the beginning of this course. There are 3 categories of information that can be displayed.

1.  Quantitative
2.  Qualitative
3.  Spatial

[Lecture 1.2.1](http://radicalresearch.llc/EDVcourse/information.html#categories-of-information-illustrated-by-the-newspaper-weather-visualization)

The three types of data can be encoded in:

-   Geometric primitives - points, lines, and areas
-   Visual channels - size, color, shape, position, angle, and texture

An advanced spatial visualization covering multiple layers of information needs to use multiple sets of encodings to convey information quickly and intuitively while not overwhelming the audience.

## Circles, Lines, and Polygons - Oh My!

Fancy maps need distinct visual encodings, so the eye can be drawn the salient features.

One key way to do this is through ensuring different types/styles/aesthetics are displayed as unique fingerprints of visual encodings.

Let's combine the three datasets we have showed in class for the sacrifice zones projects as example 1.

First, get all the libraries we need loaded up.

```{r}
#| label: load libraries
#| echo: true
#| message: false

library(tidyverse)
library(leaflet)
library(sf)
library(htmltools)

```

### Example 1 - Uranium Mines and Navajo Lands

#### Acquire datasets

##### US EPA Uranium Mills and Mines Database

Here's a geospatial [dataset](https://www.epa.gov/radiation/uranium-mines-and-mills-location-database-0) the EPA created for abandoned uranium mines in the Western US. It is downloadable as a zip file, which has multiple subdirectories. We will point to the master database as a first exploration.

```{r}
#| label: Uranium mine dataset
#| echo: true

U <- sf::st_read(dsn = 'uld-ii_gis/Master_Database_and_Shape_Files') %>% 
  st_transform(crs = 4326)

```

##### Make some exploratory maps

Let's see what the basic mines dataset looks like.

@fig-U

```{r}
#| label: fig-U
#| echo: true
#| fig-cap: Basic map of uranium mines

leaflet() %>% 
  addTiles() %>% 
  addCircleMarkers(data = U,
                   lat = ~LATITUDE,
                   lng = ~LONGITUDE,
                   clusterOptions = markerClusterOptions(),
                   color = 'yellowgreen')


```

There are WAY more uranium mines than I expected. Let's focus on areas near the Navajo Nation in the four-corners states of Colorado, New Mexico, Arizona, and Utah.

Let's `filter()` the U dataset to the spatial scale of interest using the `STATE_NAME` column.

```{r}
#| label: filter the uranium data
#| echo: true

states <- c('Colorado', 'New Mexico', 'Arizona', 'Utah')
#not the band
U2 <- U %>% 
  filter(STATE_NAME %in% states)
```

Ok, let's look at that and see if we are limiting our dataset.

@fig-U2 shows the four-corners mines.

```{r}
#| label: fig-U2
#| echo: true
#| fig-cap: Uranium mines in the four corners states

leaflet() %>% 
  addTiles() %>% 
  addProviderTiles(provider = providers$Stamen.Terrain) %>% 
  addCircleMarkers(data = U2,
                   lat = ~LATITUDE,
                   lng = ~LONGITUDE,
                   clusterOptions = markerClusterOptions(),
                   color = 'darkred',
                   label = ~htmlEscape(MINENAME)) %>% 
  addMiniMap()

```

##### Tribal Lands

Federally recognized tribal lands are available [here](https://catalog.data.gov/dataset/tiger-line-shapefile-2020-nation-u-s-american-indian-tribal-subdivisions)

It is downloadable as a zip file, which needs to be extracted.

After extracting it into the working directory, the default extracted directory is `tl_2020_us_aitsn` on my machine.

Let's do the steps - import, display a simple map, then display a fancy map.

```{r}
#| label: import tribal lands data
#| echo: true

tribalLands <- sf::st_read(dsn = 'tl_2020_us_aitsn') %>% 
  st_transform(crs = 4326)
```

Make a simple map next.

@fig-TribalLands shows the basic example.

```{r}
#| label: fig-TribalLands
#| echo: true
#| fig-cap: Boundaries of Federally Recognized Tribal Subdivisions

leaflet() %>% 
  addTiles() %>% 
  addPolygons(data = tribalLands,
              weight = 1) 

```

That worked. Let's try to combine the Uranium mines map with the tribal lands of the Navajo Nation using `setView()`. I clicked on a google map to get the lat (36.481) and lng (-109.495).

@fig-NavajoMines shows the result.

```{r}
#| label: fig-NavajoMines
#| echo: true
#| fig-cap: Uranium mines in Navajo Nation boundaries

leaflet() %>% 
  addTiles() %>% 
  addProviderTiles(provider = providers$Stamen.Terrain) %>% 
  setView(lng = -109.495, lat = 36.481, zoom = 7) %>% 
  addPolygons(data = tribalLands,
              weight = 1, 
              color = 'blue',
              fillOpacity = 0.2) %>% 
  addCircleMarkers(data = U2,
                   lat = ~LATITUDE,
                   lng = ~LONGITUDE,
                   clusterOptions = markerClusterOptions(),
                   color = 'darkred',
                   label = ~htmlEscape(MINENAME)) %>% 
  addMiniMap()

```

#### Discussion and Critique

Do Circles and Polygons overlay in a useful way?

What changes do you think would make this map more usable and intuitive?

### Example 2. Water in LA County

LA County runs an annual water deficit, which requires large annual imports of water from multiple sources. Let's try to quantify these flows.

Let's start with the supply of water data from the city of Los Angeles.

Here is a [LADWP water supply in acre-feet.](https://data.lacity.org/City-Infrastructure-Service-Requests/LADWP-Water-Supply-in-Acre-Feet/qyvz-diiw/data)

```{r}
#| label: acquire LA City water data
#| echo: true
library(janitor)

H2O_data <- read_csv('https://data.lacity.org/api/views/qyvz-diiw/rows.csv?accessType=DOWNLOAD') %>% 
  clean_names()

```

#### Plot water supply over time

@fig-BarWater shows a simple bar chart of LA City water supply sources. Note that there is some fancy data manipulation first though. Also, there's a call to the `scales` package to make the x-axis label nicer.

```{r}
#| label: fig-BarWater
#| echo: true
#| fig-cap: Water supply trends for LA City

H2O_data %>% 
  select(1, 3:6) %>% 
  pivot_longer(names_to = 'parameter', values_to = 'acreFeet', cols = 2:5) %>% 
  mutate(date_value = lubridate::mdy_hms(date_value)) %>% 
  ggplot(aes(x = date_value, y = acreFeet, fill = parameter)) +
    #geom_line() +
    #geom_point() +
    geom_bar(stat = 'identity') +
    theme_bw() +
    scale_x_datetime(labels = scales::label_date_short(), date_breaks = '5 years') +
    labs(x = '', y = 'Supply in Acre Feet')
  
```

It is very clear that groundwater and recycling are minimal. Most water is imported from MWD or the LA Aqueduct, with a general long-term trend to rely more on MWD over time.

The LA Aqueduct gets its water from the Owens Valley and by diverting water from Mono Lake. That source is restricted in the last 20 years due to agreements to stop diverting so much water in drought years in order to keep Mono Lake levels stable.

More complicated is the MWD - Municipal water district.

Water in the MWD comes from three main sources.

![MWD Water Sources](https://www.mwdh2o.com/media/voqpwgk1/wwgowchart_rev2-02.svg)

Now, there are three separate sources feeding into MWD supply. The Colorado River Aqueduct, the State Water Project, and the local sources.

Can we show the relative magnitudes for each of the aqueducts on a map?

Let's go get some aqueducts! We did this in [23.2.6](http://radicalresearch.llc/EDVcourse/import3.html#example-5.-aqueducts-in-california)

```{r}
#| label: aqueducts
#| echo: true

#CNRA GIS web link is here
geojsonsource <- 'https://gis.data.cnra.ca.gov/datasets/b788fb2628844f54b92e46dac5bb7229_0/explore?location=36.266543%2C-119.240006%2C7.03'

aqua3 <- read_sf(dsn = "i12_Canals_and_Aqueducts_local.geojson") %>% 
    st_transform("+proj=longlat +ellps=WGS84 +datum=WGS84")

```

@fig-aqueDucted shows the basic version of aqueducts feeding LA county water supply. Advanced version is possible!

```{r}
#| label: fig-aqueDucted
#| echo: true
#| fig-cap: Aqueducts supplying LA County water 

LACounty_aqua <- c('Main Canal', 'Los Angeles Aqueduct', 'Colorado River Aqueduct')

aqua3 %>% 
  filter(Name %in% LACounty_aqua) %>% 
  leaflet() %>% 
  addTiles() %>% 
  addPolylines(weight = 2,
              label = ~htmlEscape(Name))
```

Calculate latest ten-year average water contribution from LA aqueduct and MWD sources. The table below shows the values.

```{r}
#| label: tbl-H2O_avg
#| echo: true
#| tbl-cap: Percent of water from sources

H2O_2 <- H2O_data %>% 
  mutate(yr = lubridate::year(lubridate::mdy_hms(date_value))) %>% 
           filter(yr > 2006) %>% 
           summarize(avg_LA_aqueduct = mean(la_aqueduct_percent_of_total),
                     avg_MWD = mean(mwd_percent_of_total)) %>%
  mutate(CO_aqueduct = 0.25*avg_MWD, state_water_project = 0.35*avg_MWD)
         
H2O_2         
```

Ok, about 32% of water came from the LA aqueduct, 13.7% came from Colorado River Aqueduct, and 19.2% came from the State water project. That's about 65% of the water imported from the three aqueducts.

I can now overlay some markers or change the aqueduct thickness or think of some other way to visualize the source of the water coming to LA county.

#### Optional Exercise #2

Team Debt -

1.  Add some markers to the source of the aqueducts with popup labels showing the magnitude of water
2.  Add the aqueducts as separate polyline layers with separate weights to indicate relative flows?
3.  What other way would you show this information? A [sankey](https://github.com/davidsjoberg/ggsankey) diagram?
